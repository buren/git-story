#!/bin/bash

###########
#  utils   #
###########

__gs-error() {
  if [ -t 1 ];then
    echo -e "${BOLD}${MAGENTA}$1$RESET"
  else
    echo -e "$1"
  fi
}

__gs-success() {
  if [ -t 1 ];then
    echo -e "${BOLD}${GREEN}$1$RESET"
  else
    echo -e "$1"
  fi
}

__gs-warning() {
  if [ -t 1 ];then
    echo -e "${BOLD}${ORANGE}$1$RESET"
  else
    echo -e "$1"
  fi
}

__gs-info() {
  if [ -t 1 ];then
    echo -e "${BOLD}${PURPLE}$1$RESET"
  else
    echo -e "$1"
  fi
}

__gs-print() {
  if [ -t 1 ];then
    echo -e "${RESET}$1$RESET"
  else
    echo -e "$1"
  fi
}

__gs-ignore-args() {
  __gs-error "
No arguements allowed for:
\t $PURPLE$1$RESET
Ignoring arguments."
echo ""
}

__gs-abort-and-die() {
  __gs-warning "Aborted." && die
}

__gs-empty-string() {
  if [[ -z "$(__gs-trim-whitspace $1)" ]]; then
    echo "true"
  else
    echo "false"
  fi
}

__gs-trim-whitspace() {
  echo "$(echo "$1" | awk '{gsub(/^ +| +$/,"")} {print "" $0 ""}')"
}

__gs-no-spaces-or-die() {
  if [[ "$1" == *" "* ]]; then
    __gs-error "ERROR:"
    __gs-print "Supplied argument: '$1'"
    local default_type="Branch name"
    __gs-print "${2:-$default_type} can *not* contain spaces!"
    die
  fi
}

__gs-continue-prompt() {
  while true; do
    local yn="$(__gs-prompt-for-result "$1 [y\n]")"
    case $yn in
      [Yy]* ) __gs-print "Resuming.."; break;;
      [Nn]* ) __gs-warning "Aborted."; die; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
}

__gs-not-null-or-prompt() {
  if [[ -z $1 ]]; then
    local res=$(__gs-prompt-for-result "$2")
    if [[ -z "$res" ]]; then
      die "Argument can't be empty."
    fi
  else
    echo "$1"
    return
  fi
  echo "$res"
}

__gs-prompt-for-result() {
  if [[ "$(uname)" == "Darwin" && $GS_GRAPHIC_PROMPT == true ]]; then
    # TODO: Seems like this causes bash to throw:
    #   $HOME/.git-story/src/common/utils: line 107: unexpected EOF while looking for matching `)'
    #   $HOME/.git-story/src/common/utils: line 122: syntax error: unexpected end of file
    # not sure why I haven't seen this before, perhaps I just missed it or it has something
    # to do with the bash version..
    local p_res=$(/usr/bin/osascript << EOT
      activate
      display dialog "$1" default answer "" buttons {"OK"} default button 1
      set site to text returned of the result
      return site
    EOT)
    #
  elif [[ $SHELL == "/bin/zsh" ]]; then
    local p_res=""
    vared -p "$1" p_res
  else
    read -p  "$1" p_res
  fi
  echo $p_res
}
