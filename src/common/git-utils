#!/bin/bash

#####################
#  git-story utils  #
#####################

__gs-check-usage-param() {
  case "$1" in
    "--usage" | "-usage" | "--help" | "-help" | "-h" )
      usage
      die
      ;;
  esac
}

# $1 : target branch
# $2 : current branch
# $3 : merge failed warning message
# $4 : prompt on automatic merge
__gs-pull-and-check-status() {
  local pull_target="$1"
  local current_br="$2"
  local merge_wrn_msg="$3"
  local no_auto_prompt="$4"

  if [[ "$(__gs-remote-branch-exists $pull_target)" == "true" ]];then
    git checkout $pull_target
    __gs-print "Pull from $pull_target"
    git pull $GS_DEFAULT_REMOTE $pull_target || gs-show-conflicted-and-die
    git checkout $current_br
  fi

  local pull_tail="$(git merge $pull_target)"

  if [[ "$pull_tail" == *"Already up-to-date"* ]]; then
    echo
  elif [[ "$pull_tail" == *"Automatic merge failed"* ]]; then
    __gs-automatic-merge-failed $pull_target $current_br
    echo
    git conflicted
    if [[ ! -z $merge_wrn_msg ]]; then
      echo
      __gs-warning "Warning:"
      echo "$merge_wrn_msg"
    fi
    die
  elif [[ "$pull_tail" == *"Fast-forward"* ]] || [[ "$pull_tail" == *"Merge made"* ]]; then
    __gs-print "Content has changed."
    if [[ $GS_TEST_ON_AUTO_MERGE == true ]]; then
      __gs-print "Running tests..."
      git test
      if [[ ! -z $GS_PRE_COMMIT_HOOK ]] && [[ -z $no_auto_prompt ]]; then
        __gs-continue-prompt "Check tests status. Would you like to continue?"
      fi
    fi
  elif [[ "$pull_tail" == *"fatal:"* ]]; then
    echo "Fatal git status.."
    echo "Pull output: $pull_tail"
    gs-error-and-die
  else
    echo "Pull output: $pull_tail"
    gs-error-and-die
  fi
}

gs-error-and-die() {
  __gs-error "Something went wrong."
  __gs-print "Check output."
  die
}

gs-show-conflicted-and-die() {
  echo
  git conflicted
  die
}

__gs-add-all() {
  git add --all :/
}

# $1 : remote target
# $2 : current
__gs-sync-branch() {
  __gs-pull-and-check-status $1 $2
  git push $GS_DEFAULT_REMOTE $2
}

__gs-current-branch() {
  echo "$(git rev-parse --abbrev-ref HEAD)"
}

__gs-git-root-dir() {
  echo "$(git rev-parse --show-toplevel)"
}

__gs-dir-clean-or-die() {
  if [[ $(__gs-is-clean-dir) == "dirty" ]]; then
    __gs-uncommitted-changes-message
    die
  fi
}

__gs-is-clean-dir() {
  if [[ $(git status 2> /dev/null | tail -n1) == *"working directory clean"* ]]; then
    echo "clean"
  else
    echo "dirty"
  fi
}

#
__gs-remote-branches() {
  echo "$(git branch --remote | grep -v "\->")" 2> /dev/null
}

# Check globally unique branch_name
__gs-global-unique-branch-or-die() {
    if [[ ! -z "$(__gs-remote-branches | grep -w "$GS_DEFAULT_REMOTE/$1")" ]]; then
    __gs-error "A branch with name '$1' already exists."
    __gs-info "Please choose another branch name."
    die
  fi
}

# Check that target-branch exists at remote
# $1: target-branch
__gs-remote-branch-exists-or-die() {
  if [[ "$(__gs-remote-branch-exists)" == "false" ]]; then
    __gs-error "Target branch with name '$1' does *not* exist."
    __gs-info "Please choose valid target branch."
    die
  fi
}

__gs-branch-exists() {
  local branches="$(__gs-remote-branches)\n$(git branch)"
  if [[ -z "$(echo "$branches" | grep -w "$1")" ]]; then
    echo "false"
  else
    echo "true"
  fi
}

__gs-remote-branch-exists() {
  if [[ -z "$(__gs-remote-branches | grep -w "$GS_DEFAULT_REMOTE/$1")" ]]; then
    echo "false"
  else
    echo "true"
  fi
}

# Check that target-branch exists
# $1 : target-branch
__gs-branch-exists-or-die() {
  local target_branch="$1"
  local branches="$(__gs-remote-branches)\n$(git branch)"
  if [[ -z "$(echo "$branches" | grep -w "$target_branch")" ]]; then
    __gs-error "Target branch with name '$target_branch' does *not* exist."
    __gs-info "Please choose valid target branch."
    die
  fi
}

repository_age() {
  git log --reverse --pretty=oneline --format="%ar" | head -n 1 | sed 's/ago//'
}

# get date for the given <commit>
date() {
  git log --pretty='format: %ai' $1 | cut -d ' ' -f 2
}

# get active days for the given <commit>
active_days() {
  date $1 | uniq | awk '
    { sum += 1 }
    END { print sum }
  '
}

#
# get the commit total
#

commit_count() {
  git log --oneline $commit | wc -l | tr -d ' '
}

# total file count
file_count() {
  git ls-files | wc -l | tr -d ' '
}

# list authors
authors() {
  git shortlog -n -s $commit | awk '
  { args[NR] = $0; sum += $0 }
  END {
    for (i = 1; i <= NR; ++i) {
      printf "%-30s %2.1f%%\n", args[i], 100 * args[i] / sum
    }
  }
  '
}
