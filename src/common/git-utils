#!/bin/bash

#####################
#  git-story utils  #
#####################

__gs-check-usage-param() {
  case "$1" in
    "--usage" | "--help" | "-help" | "-h" )
      usage
      die
      ;;
  esac
}

# $1 : target branch
# $2 : current branch
# $3 : merge failed warning message
__gs-pull-and-check-status() {
  pull_tail=$(git pull $GS_DEFAULT_REMOTE $1 2> /dev/null)
  if [[ $pull_tail == *"fatal:"* ]]; then
    echo $pull_tail
    __gs-error "Something went wrong."
    die
  elif [[ $pull_tail == *"Automatic merge failed"* ]]; then
   __gs-automatic-merge-failed $1 $2
   echo
   __gs-info "Merge conflicts in:"
   git conflicted
   if [[ ! -z $3 ]]; then
     echo
     __gs-warning "Warning:"
     echo "$3"
   fi
   die
  elif [[ $pull_tail == *"Already up-to-date"* ]]; then
    __gs-print "'$1' already up-to-date."
  else
    __gs-print "Automatic merge with '$1' successfull."
    if [[ $GS_TEST_ON_AUTO_MERGE == true ]]; then
      __gs-print "Running tests..."
      git test
      if [[ ! -z $GS_PRE_COMMIT_HOOK ]] && [[ -z $4 ]]; then
        __gs-continue-prompt "Check tests status. Would you like to continue?"
      fi
    fi
  fi
}

__gs-add-all() {
  git add --all :/
}

# $1 : remote target
# $2 : current
__gs-sync-branch() {
  __gs-print "Pull from: '$1'"
  __gs-pull-and-check-status $1 $2
  git push $GS_DEFAULT_REMOTE $2
}

__gs-current-branch() {
  echo "$(git rev-parse --abbrev-ref HEAD)"
}

__gs-git-root-dir() {
  echo "$(git rev-parse --show-toplevel)"
}

__gs-dir-clean-or-die() {
  if [[ $(__gs-is-clean-dir) == "dirty" ]]; then
    __gs-uncommitted-changes-message
    die
  fi
}

__gs-is-clean-dir() {
  if [[ $(git status 2> /dev/null | tail -n1) == *"working directory clean"* ]]; then
    echo "clean"
  else
    echo "dirty"
  fi
}

#
__gs-remote-branches() {
  echo "$(git branch --remote | grep -v "\->")" 2> /dev/null
}

# Check globally unique branch_name
__gs-global-unique-branch-or-die() {
    if [[ ! -z "$(__gs-remote-branches | grep -w "$GS_DEFAULT_REMOTE/$1")" ]]; then
    __gs-error "A branch with name '$1' already exists."
    __gs-info "Please choose another branch name."
    die
  fi
}

# Check that target_branch exists
__gs-branch-exists-or-die() {
  if [[ -z "$(__gs-remote-branches | grep -w "$GS_DEFAULT_REMOTE/$1")" ]]; then
    __gs-error "Target branch with name '$1' does *not* exist."
    __gs-info "Please choose valid target branch."
    die
  fi
}
