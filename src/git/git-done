#!/bin/bash
source $GS_INIT_PATH
__git-story-init

##########
#  done  #
##########

usage() {
  __gs-print "usage:
\t git done
only if all changes have been committed.
otherwise run:
\t git done 'Commit message' <target_branch>
will fetch and merge <target_branch>. <target_branch> is optional and defaults to $GS_GIT_STORY_BRANCH.
note:"
  __gs-warning "\t Can cause merge conflicts"
}

main() {
  __gs-check-usage-param $1
  main-exec "$@"
}

main-exec() {
  local commit_msg="$1"
  local target_branch="${2:-$GS_GIT_STORY_BRANCH}"
  __gs-no-spaces-or-die "$target_branch"

  if [[ $(__gs-is-clean-dir) == "dirty" ]]; then
    if [[ -z "$commit_msg" ]]; then
      __gs-warning "You have uncommited changes."
      __gs-continue-prompt "Commit all files and continue?"
      __gs-add-all
      git commit && __gs-print "Commit added." || __gs-abort-and-die
    else
      git addcom "$commit_msg"
    fi
  elif [[ ! -z "$commit_msg" ]]; then
    __gs-info "Nothing to commit. Ignoring commit message."
  fi

  git test

  if [[ $GS_PROMPT_ON_DONE  == true ]]; then
    __gs-done-checklist-print
    echo
    __gs-continue-prompt "Have you answered yes to all of the above?"
  fi

  gs-sync-local-with-branch "$target_branch"

  if [[ $GS_LOCAL_MERGE == true ]]; then
    feature_branch="$(__gs-current-branch)"
    __gs-print "Performing local merge to '$target_branch' from '$feature_branch'"
    git checkout $target_branch
    git merge $feature_branch
    git push $GS_DEFAULT_REMOTE $target_branch
  fi
}

gs-sync-local-with-branch() {
  local current="$(__gs-current-branch)"
  local target=$1
  __gs-sync-branch $current $current
  __gs-sync-branch $target $current
  __gs-print "Pushed $current to repository"
}

main "$@"
