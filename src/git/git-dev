#!/bin/bash
source $GS_INIT_PATH
__git-story-init

#########
#  dev  #
#########

usage() {
  __gs-print "
usage:
\t git dev <branch_name> <base_branch>
<base_branch> is optional and will default to master
If --force is supplied as the second argument no checks will be made.

Guarantees clean workspace from remote master (or specified branch)."
}

main() {
  __gs-check-usage-param $1
  main-exec "$@"
}

main-exec() {
  if [[ -z "$1" ]]; then
    usage
    __gs-error "You must provide a branch name"
    __gs-error "Missing argument <branch_name>"
    die
  elif [[ "$2" == "--force" ]]; then
    git checkout -b $1
    die
  fi

  __gs-dir-clean-or-die

  if [[ $1 == *" "* ]]; then
    __gs-error "ERROR:"
    __gs-error "\t Name can't contain spaces!"
    die
  fi

  git fetch $GS_DEFAULT_REMOTE
  # Check globally unique branch_name
  repo_branches="$(git branch --remote | grep -v "\->")" 2> /dev/null
  if [[ $repo_branches == *"$GS_DEFAULT_REMOTE/$1"* ]]; then
    __gs-error "A branch with name '$1' already exists."
    __gs-info "Please choose another branch name."
    die
  fi

  # Check that target_branch exists
  if [[ $repo_branches != *"$GS_DEFAULT_REMOTE/$2"* ]]; then
    __gs-error "Target branch with name '$2' does NOT exist."
    __gs-info "Please choose valid target branch."
    die
  fi

  base=$2
  branch=${base:-master}

  git checkout $branch
  __gs-pull-and-check-status $branch $branch "[WARNING] You're current branch is '$branch'!"
  git create-branch $1

  __gs-success "Success:"
  __gs-print "Updated$PURPLE $branch$RESET, from repository."
  __gs-print "Created branch: $PURPLE $1 $RESET"
  __gs-print "Based of branch:$PURPLE $branch $RESET"
}

main "$@"
