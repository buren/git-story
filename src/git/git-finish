#!/bin/bash
source $GS_INIT_PATH
__git-story-init

##########
#  done  #
##########

USAGE="<target-branch>

optional:
  target-branch, default: $GS_GIT_STORY_BRANCH

commit the changes you've made and merge changes with target-branch."

main() {
  __gs-check-usage-param $1
  main-exec "$@"
}

main-exec() {
  local target_branch="${1:-$GS_GIT_STORY_BRANCH}"
  __gs-no-spaces-or-die "$target_branch"
  __gs-branch-exists-or-die "$target_branch"

  if [[ $(__gs-is-clean-dir) == "dirty" ]]; then
    __gs-warning "You have uncommitted changes."
    __gs-continue-prompt "Commit all files and continue?"
    __gs-add-all
    git commit && __gs-print "Commit added." || __gs-abort-and-die
  fi

  if [[ $GS_TEST_ON_DONE == true ]]; then
    git test
  fi

  if [[ $GS_PROMPT_ON_DONE  == true ]]; then
    __gs-done-checklist-print
    echo
    __gs-continue-prompt "Have you answered yes to all of the above?"
  fi

  gs-sync-local-with-branch "$target_branch"

  git push $GS_DEFAULT_REMOTE --tags
  __gs-print "Pushed tags to remote."

  if [[ $GS_LOCAL_MERGE == true ]]; then
    ga-perform-local-merge $target_branch
  fi
}

gs-sync-local-with-branch() {
  local current="$(__gs-current-branch)"
  local target=$1
  __gs-sync-branch $current $current
  __gs-sync-branch $target $current
  __gs-print "Pushed $current to repository"
}

ga-perform-local-merge()  {
  local feature_branch="$(__gs-current-branch)"
  __gs-info "Performing local merge."
  __gs-print "Merging target branch '$target_branch' with feature branch '$feature_branch'."
  git checkout $target_branch
  git merge $feature_branch
  git push $GS_DEFAULT_REMOTE $target_branch
  git checkout $feature_branch
}

main "$@"
