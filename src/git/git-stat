#!/bin/bash
source $GS_INIT_PATH
__git-story-init

###########
#  stats  #
###########

usage() {
  __gs-print "
usage:
\t git stat <type>
\t          contributions <author> # shows statistics for all authors or specified author (alias: contrib)
\t          commits                # shows number of commits for each author
\t          weekdays               # prints statistics for number of commits per weekday
\t          hour                   # prints statistics for number of commits per hour
prints statistics of given type.

example:
\t git stat contributions
Default: contributions"
}

main() {
  if [[ "$1" == "--usage" ]]; then
    usage
    return
  elif [[ -z "$1" ]] || [[ "$1" == "contributions" ]] || [[ "$1" == "contrib" ]]; then
    if [[ -z $2 ]] || [[ "$2" == "each" ]]; then
      commit_summary="$(git shortlog --summary --numbered --no-merges)"
      __gs-list-authors | while read line; do
        __gs-stat-author-contrib "${line}" "$commit_summary"
      done
      __gs-stat-author-contrib "total" "$commit_summary"
      echo ""
    else
      __gs-stat-author-contrib "$2"
    fi
  elif [[ "$1" == "commits" ]] || [[ "$1" == "commit" ]]; then
    if [[ ! -z "$2" ]]; then
      __gs-ignore-args "git stat $1 $2"
    fi
    __gs-stat-commits
  elif [[ "$1" == "weekday" ]] || [[ "$1" == "weekdays" ]] || [[ "$1" == "week" ]]; then
      for i in Mon Tue Wed Thu Fri Sat Sun; do
        echo $( echo " $i: "; git shortlog  -n --format='%ad %s'| grep "$i " | wc -l) # must use 'echo'
      done
  elif [[ "$1" == "hour" ]] || [[ "$1" == "hours" ]]; then
      for i in `seq -w 0 23`; do
        echo $( echo " $i:"; git shortlog  -n --format='%ad %s' | grep " $i:" | wc -l) # must use 'echo'
      done
  elif [[ "$1" == "files" ]] || [[ "$1" == "lines" ]] || [[ "$1" == "loc" ]]; then
      __gs-safe-path-operation "$(git ls-files | xargs cat | wc -l)" "$2" "Lines:       "
      __gs-safe-path-operation "$(git ls-files |  wc -l)" "$2" "Unique files:"
  else
    __gs-error "Error '$1' unrecognized argument."
    usage
  fi
}

__gs-safe-path-operation() {
  dir=$(pwd)
  if [[ -z $2 ]]; then
    cd "$(git rev-parse --show-toplevel)"
  else
    cd "$2"
  fi
  __gs-info "$3 $1"
  cd $dir
}

__gs-list-authors() {
  git log --format='%aN' | sort -u
}

__gs-stat-commits() {
  git shortlog --summary --numbered --no-merges
}

__gs-stat-author-contrib() {
  if [[ "$1" == "total" ]] || [[ "$1" == "tot" ]] || [[ "$1" == "summary" ]] || [[ "$1" == "sum" ]]; then
    __gs-info "Summary:"
    git log --pretty=tformat: --numstat | awk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END \
    { printf "added lines:   %s \nremoved lines: %s \ntotal lines:   %s\n",add,subs,loc }' -
    echo -e "$2" | cut -f1 | tr -d ' ' | awk '{ commits += $1 ;} END \
            { printf "commits:       %s \n",commits }' -
  elif [[ ! -z "$1" ]]; then
    echo ""
    __gs-print "Contributions by: $PURPLE$1$RESET"
    git log --author="$1" --pretty=tformat: --numstat | awk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END \
    { printf "added lines:   %s \nremoved lines: %s \ntotal lines:   %s\n",add,subs,loc }' -
    echo -e "$2" | grep "$1" | cut -f1 | tr -d ' ' | awk '{ commits += $1 ;} END \
            { printf "commits:       %s \n",commits }' -
    echo ""
  else
    __gs-error "[ERROR] No argument supplied for __gs-stat-author-contrib."
    usage
  fi
}

main "$@"
