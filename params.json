{"name":"git-story","tagline":"Simplified git workflow.","body":"# git-story (beta)\r\n\r\n#### Simplified git workflow.\r\n\r\n_git-story_ tries to simplify the [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html) branching model, so that any VCS novice can use it within 5 minutes.\r\n\r\nIt also includes various extensions to git, documented below.\r\n\r\n* [Installation](#install-git-story)\r\n* [Getting Started](#getting-started)\r\n* [Example](#example)\r\n* [Configuration](#configuration)\r\n* [Command list](#command-list)\r\n* [Documentation](#documentation)\r\n* [Notes](#notes)\r\n* [License](#license)\r\n\r\n## Install git-story\r\n\r\n    curl https://raw2.github.com/buren/git-story/master/setup/install | bash\r\nThe above command will install and inject an import of the _git-story_ script to either `.bash_profile`, `.bashrc` or `.zshrc` (in that order).\r\n\r\nReload your shell to initialize _git-story_ extensions.\r\n\r\n## Getting started\r\n\r\n\r\nThe model:\r\n\r\n1. Start developing a feature, and name it `git dev <name>`\r\n2. Save local changes and sync with remote `git done`\r\n3. Create a pull request\r\n\r\nThe principle is that you develop each new feature in its own branch and when\r\nyou're done you push it and create a pull request.\r\n\r\n## Example\r\n\r\n    git dev branch_name   # Sets up clean workspace based on remote master.\r\n    git done              # Commit changes, updates current and local branch.\r\nOutput [example](http://showterm.io/f25fff6593f82dcdab7d1) (video).\r\n\r\n## Command list\r\n\r\n    git\r\n       dev               Start developing a new feature\r\n       done              Commit changes and sync with remote\r\n       update            Pull current branch's remote changes\r\n       addcom            Adds all files and commit them\r\n       fuckit            Commit all files and push current branch\r\n       push-branch       Push the current branch to remote\r\n       create-branch     Create and checkout a new branch on remote and local\r\n       delete-branch     Delete branch from remote and local\r\n       goto              Switch from current branch to specified branch\r\n       abort-merge       Aborts current merge\r\n       history           List repository commits\r\n       tag-release       Create a new tag\r\n       redo-commit       Redo last commit\r\n       stat              Print statistics of git repository\r\n       fetch-branches    Fetches all branches from remote\r\n       browse            Open current git repository on Github\r\n       test              Runs test command defined in .gitstoryrc\r\n       package           Runs package command defined in .gitstoryrc\r\n       release           Runs release command defined in .gitstoryrc\r\n       install-project   Runs install command defined in .gitstoryrc\r\n       trail             Show the last common commit with current branch\r\n       neck              Show commits until first branching point\r\n       branch-status     Show current branch status\r\n       churn             Count number of changes for each file\r\n       conflicted        List files with merge-conflicts\r\n       divergence        Show difference between current branch and remote branch\r\n       gs                List git-story extensions\r\n       gs-extend         Add new git-story extension to git\r\n       gs-update         Update git-story to its latest version\r\n\r\n\r\n## Documentation\r\n\r\n### GitHub Flow extensions\r\n\r\n* Start developing a feature\r\n\r\n        git dev <branch_name>\r\n        git dev <branch_name> <base_branch>\r\nthis will create a new branch <branch_name> based of master or specified <base_branch>. If the branch exists on remote pull the latest changes. Ensures the uniqueness of branch name at remote. Pushes the created branch to remote.\r\n* Commit and sync with repository\r\n\r\n        git done <target_branch>\r\ncommit the changes you've made and merge changes with <target_branch>.\r\n`<target_branch>` is optional and defaults to 'master'.\r\nIf no merge conflicts, create a pull request. Otherwise fix all merge conflicts and run `git done`.\r\n\r\n### git convenience extensions\r\n* `git update` pull current branch's remote changes.\r\n* `git addcom <commit_message>` add all files and commit.\r\n* `git fuckit` commit all files with optional <message> and push current branch. Default message is 'Update'.\r\n* `git redo-commit` Redo last commit.\r\n* `git tag-release` Create a new tagged release.\r\n* `git goto <branch_name>` switches to branch <branch_name> if the working directory is clean.\r\n* `git history` view repository commit history.\r\n* `git abort-merge` aborts current merge.\r\n* `git conflicted` list files with merge-conflicts.\r\n\r\n### git branching extensions\r\n* `git branch-status` shows current branch status.\r\n* `git create-branch` create and checkout a new branch and push to remote.\r\n* `git delete-branch` delete branch from remote and local.\r\n* `git push-branch` push the current branch to remote.\r\n* `git fetch-branches` fetch all remote branches.\r\n* `git trail` shows the last common commit with current branch.\r\n* `git neck` show commits until first branching point.\r\n* `git divergence` show the difference between current branch and the same branch at remote.\r\n\r\n### Project integration\r\n* `git browse`  opens the repository on GitHub.\r\n* `git package` Package the project. Runs `GS_PACKAGE`.\r\n* `git release` Package the project. Runs `GS_RELEASE`.\r\n* `git install-project` Install the project. Runs `GS_INSTALL`.\r\n* `git test`    Package the project. Runs `GS_PRE_COMMIT_HOOK`.\r\n\r\n### Git statistics\r\n* Show statistics for repository\r\n\r\n        git stat <type>\r\n                contributions   # shows statistics for all authors or specified author (alias: contrib)\r\n                commits         # shows number of commits for each author\r\n                weekdays        # prints statistics for number of commits per weekday\r\n                hour            # prints statistics for number of commits per hour\r\n                files           # prints number of files and lines\r\n                diff            # print stat of uncommitted changes\r\n                log             # print log with stat\r\n                modified        # print stat of most modified files\r\nshow statistics for repository.\r\n* `git churn` count number of changes for each file.\r\n\r\n### git-story interactions\r\n* `git gs-update` gets the latest version of _git-story_.\r\n* `git gs-extend <extension-name>` add new _git-story_ extension to git.\r\n* `git gs` list _git-story_ extensions.\r\n\r\n\r\n## Configuration\r\nFor project specific configurations create a file named `.gitstoryrc` at the project's git root.\r\n\r\nSee example with comments in [docs/gitstoryrc-example](https://github.com/buren/git-story/blob/master/docs/gitstoryrc-example).\r\n\r\nAvailable options and their default value:\r\n\r\n    GS_DEFAULT_REMOTE='origin'          # Default remote for git story\r\n    GS_GIT_STORY_BRANCH='master'        # Target branch for 'dev' & 'done'\r\n    GS_LOCAL_MERGE=false                # Perform local merge on 'done'\r\n    GS_PRINT_CHECKLIST=false            # Print checklist before 'done'\r\n    GS_PROMPT_ON_DONE=false             # Prompt user before 'done'\r\n    GS_TEST_ON_DONE=true                # Run test dcommand before 'done'\r\n    GS_CHECKLIST_MESSAGE='...'          # Checklist string for 'done'\r\n    GS_PRE_COMMIT_HOOK=''               # A command that runs all tests\r\n    GS_PACKAGE=''                       # Shell command for 'package'\r\n    GS_RELEASE=''                       # Shell command for 'release\r\n    GS_INTSALL=''                       # Shell command for 'install'\r\n    GS_HAS_GITHUB=true                  # Project has GitHub.\r\n    GS_PROJECT_URL=''                   # Project URL\r\n    GS_TEST_ON_AUTO_MERGE=true          # Run tests command on auto merge\r\n    GS_PRODUCTION_BRANCH='heads/master' # Integration branch for production\r\n    GS_NEXT_VERSION_BRANCH=''           # Integration branch for next\r\n    GS_EDGE_BRANCH=''                   # Integration branch for edge\r\n    GS_GIT_STORY_EXT_BRANCH='master'    # Target branch git-story tool\r\nSee [config](https://github.com/buren/git-story/blob/master/config) for details.\r\n\r\n## Notes\r\n* Tested on Linux/OSX using both zsh and bash\r\n* Wont work with sh\r\n* The software is supplied “as is” and all use is at your own risk (see [license](https://github.com/buren/git-story/blob/master/LICENSE)\r\n* `git branch-status` requires Ruby 1.8.7 or greater\r\n\r\n## License\r\n_git-story_ is released under the [MIT License](https://github.com/buren/git-story/blob/master/LICENSE).\r\n","google":"UA-47025757-1","note":"Don't delete this file! It's used internally to help with page regeneration."}