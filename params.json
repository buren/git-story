{"name":"Git-story","tagline":"Simplified git workflow.","body":"# git-story (alpha)\r\n\r\n\r\nSimplified git workflow.\r\nBranch strategy based on [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html).\r\n\r\n## Install git-story\r\n\r\n    curl https://raw2.github.com/buren/git-story/master/setup/install.sh | bash\r\n\r\n## Getting started\r\nA git story is a git branching model which tries to so simple that any SCM novice should be able to effectively use it within 5 minutes.\r\n\r\nThe model:\r\n\r\n1. Start developing a feature, and name it `gs dev <name>`\r\n2. Save local changes and sync with remote `gs done <commit_message>`\r\n3. If any conflicts fix them and `gs done \"Fixed merge conflicts in ...\"`\r\n4. Make a pull request on GitHub `gs pull-request`\r\n \r\n## Example\r\n\r\n    gs dev branch_name                     # Sets up clean workspace based of remote master.\r\n    gs commit \"Commit message\"             # Commit changes locally.\r\n    gs done \"Commit message\"               # Commit changes, update master and merge.\r\n    gs pull-request                        # Opens project GitHub page. So you can make a pull request.\r\n\r\n## Documentation\r\n\r\n* Start developing a feature\r\n\r\n        gs dev <branch_name>\r\n        gs dev <branch_name> <base_branch>\r\nthis will create a new branch <branch_name> based of master or specified <base_branch>. If the branch exists on remote pull the latest changes.\r\n\r\n* Commit your changes\r\n\r\n        gs commit <commit_message> # alias: checkpoint\r\ncomment and commit to the changes you've made.\r\n\r\n* Commit and sync with repository\r\n\r\n        gs done <commit_message>\r\ncomment and commit to the changes you've made and merge changes made on master. If no merge conflicts open the projects GitHub and make a pull request `gs pull-request`. Otherwise fix all merge conflicts and run `gs done \"Fixed merge conflicts\"` . Then open GitHub and make a pull request `gs pull-request`.\r\n* Fetch and merge\r\n\r\n        gs update\r\nfetch and merge from remote.\r\nExample: If the current branch is \"test_feature\" the command will try to fetch and merge the remote version of test_feature.\r\n* ```gs pull-request``` opens the repository on GitHub. Aliased as `gs open`\r\n* ```gs where``` prints all branches and marks the current one with a *.\r\n* ```gs switchto <branch_name>``` switches to branch <branch_name> if all changes are stashed or committed.\r\n* ```gs diff``` view all uncommitted changes.\r\n* ```gs history``` view repository commit history.\r\n* ```gs list``` list all available git-story commands.\r\n* Show commited changes\r\n\r\n        gs show\r\n        gs show <sha>\r\nview the last commit in current branch or specified commit <sha>.\r\n\r\n## Caution\r\nOverides ```gs``` (Ghostscript) command on Linux.\r\n","google":"UA-47025757-1","note":"Don't delete this file! It's used internally to help with page regeneration."}