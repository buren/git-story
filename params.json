{"name":"git-story","tagline":"Simplified git workflow.","body":"# git-story (beta)\r\n\r\n#### Simplified git workflow.\r\n\r\nBranch strategy based on [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html).\r\n\r\n* [Installation](#install-git-story)\r\n* [Example](#example)\r\n* [Configuration](#configuration)\r\n* [Command list](#command-list)\r\n* [Documentation](#documentation)\r\n* [Notes](#notes)\r\n* [License](#license)\r\n\r\n## Install git-story\r\n\r\n    curl https://raw2.github.com/buren/git-story/master/setup/install | bash\r\ninjects import of git-story script to either `.bash_profile`, `.bashrc` or `.zshrc` (in that order).\r\n\r\n## Getting started\r\ngit-story tries to simplify the [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html) branching model, so that any VCS novice can use it within 5 minutes.\r\n\r\nThe model:\r\n\r\n1. Start developing a feature, and name it `git dev <name>`\r\n2. Save local changes and sync with remote `git done <commit_message>`\r\n3. If any conflicts fix them and `git done \"Fixed merge conflicts in ...\"`\r\n4. Create a pull request on GitHub (or any other host)\r\n\r\nThe principle is that you develop each new feature in its on branch. Then when you're ready you push it and create a pull request.\r\n\r\n## Example\r\n\r\n    git dev branch_name        # Sets up clean workspace based of remote master.\r\n    git done \"Commit message\"  # Commit changes, update master and merge with repository.\r\nOutput [example](http://showterm.io/238c04d003bfb22f1d91d) (video).\r\n\r\n## Command list\r\n\r\n    git\r\n       dev             Start developling a new feature\r\n       done            Commit changes and sync with remote\r\n       goto            Switch from current branch to specified branch\r\n       history         List repository commits\r\n       abort-merge     Aborts current merge\r\n       tag-release     Create a new tag\r\n       stat            Print statistics of git repository\r\n       fetch-branches  Fetches all branches from remote\r\n       open            Open current git repository on Github\r\n       test            Runs test command defined in .gitstoryrc\r\n       package         Runs package command defined in .gitstoryrc\r\n       release         Runs release command defined in .gitstoryrc\r\n       extend-with     Add new git-story extension to git\r\n       list-extended   Lists all git-story commands\r\n       get-update      Updates git-story\r\n\r\n\r\n## Documentation\r\n\r\n* Start developing a feature\r\n\r\n        git dev <branch_name>\r\n        git dev <branch_name> <base_branch>\r\nthis will create a new branch <branch_name> based of master or specified <base_branch>. If the branch exists on remote pull the latest changes. Ensures the uniqueness of branch name at remote. Pushes the newly created branch to remote.\r\nIf --force is supplied as the second argument no checks are made.\r\nNo checks are made if --force is supplied as the second argument.\r\n* Commit and sync with repository\r\n\r\n        git done <commit_message> <target_branch>\r\ncomment and commit the changes you've made and merge changes made on <target_branch>.\r\n`<target_branch>` is optional and defaults to 'master'.\r\nIf no merge conflicts, create a pull request. Otherwise fix all merge conflicts and run `git done \"Fixed merge conflicts for ...\"`.\r\n* Fetch and merge\r\n\r\n        git pull\r\nfetch and merge from remote.\r\nExample: If the current branch is \"test_feature\" it will try to fetch and merge the remote version of test_feature.\r\n* ```git browse```  opens the repository on GitHub.\r\n* ```git package``` Package the project. Runs `GS_PACKAGE`.\r\n* ```git release``` Package the project. Runs `GS_RELEASE`\r\n* ```git test```    Package the project. Runs `GS_PRE_COMMIT_HOOK`.\r\n* ```git goto <branch_name>``` switches to branch <branch_name> if all changes are stashed or committed.\r\n* ```git history``` view repository commit history.\r\n* ```git tag-release``` Create a new tagged release\r\n* ```git abort-merge``` aborts current merge\r\n* ```git extend-with <extension-name>``` add new git-story extension to git\r\n* ```git fetch-branches``` .\r\n* ```git update-git-story``` gets the latest version of git-story.\r\n* Show statistics for repository\r\n\r\n        git stat <type>\r\n                contributions   # shows statistics for all authors or specified author (alias: contrib)\r\n                commits         # shows number of commits for each author\r\n                weekdays        # prints statistics for number of commits per weekday\r\n                hour            # prints statistics for number of commits per hour\r\nshow statistics for repository.\r\n\r\n## Configuration\r\nFor project specific configurations create a file named `.gitstoryrc` at the project's git root.\r\nAvailable options:\r\n\r\n    GS_GIT_STORY_BRANCH  # (String)  Target branch for 'git done'       Default: \"master\"\r\n    GS_PRE_COMMIT_HOOK   # (String)  A command that runs all tests      Default: \"\"\r\n    GS_PACKAGE           # (String)  Shell command for 'package'        Default: \"\"\r\n    GS_RELEASE           # (String)  Shell command for 'release'        Default: \"\"\r\n    GS_PROMPT_ON_DONE    # (Boolean) Prompt user before executing done  Default: false\r\n    GS_PRINT_CHECKLIST   # (Boolean) Print checklist before 'done'      Default: false\r\n    GS_HAS_GITHUB        # (Boolean) Project has GitHub.                Default: true\r\n    GS_PROJECT_URL       # (String)  Project URL                        Default: \"\"\r\n    GS_PROMPT_BROWSE_URL # (Boolean) Prompt to open project URL on done Default: true\r\n    GS_CHECKLIST_MESSAGE # (String)  Checklist string for 'done'        Default: \"1. Have you...\"\r\n    GS_NEW_TAG_PROMPT    # (String)  Prompt text for tag-release        Default: \"What tag...\"\r\n\r\nSee [config](https://github.com/buren/git-story/blob/master/config) for details.\r\n\r\n## Notes\r\n* Tested on Linux/OSX\r\n* The software is supplied “as is” and all use is at your own risk.\r\n\r\n## License\r\ngit-story is released under the [MIT License](https://github.com/buren/git-story/blob/master/LICENSE).\r\n","google":"UA-47025757-1","note":"Don't delete this file! It's used internally to help with page regeneration."}