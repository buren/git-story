{"name":"git-story","tagline":"Simplified git workflow.","body":"# git-story\r\n\r\nVarious extensions to git, documented below.\r\n\r\n\r\n* [Installation](#install-git-story)\r\n* [Getting Started](#getting-started)\r\n* [Example](#example)\r\n* [Configuration](#configuration)\r\n* [Documentation](#documentation)\r\n  * [Branching extensions](#branching-extensions)\r\n  * [Convenience extensions](#convenience-extensions)\r\n  * [Log extensions](#log-extensions)\r\n  * [Project integration extensions](#project-integration-extensions)\r\n  * [Statistics extensions](#statistics-extensions)\r\n  * [git-story interactions](#git-story-interactions)\r\n  * [Misc](#misc)\r\n* [Notes](#notes)\r\n* [License](#license)\r\n\r\n## Install git-story\r\n\r\n    curl https://raw2.github.com/buren/git-story/master/setup/install | bash\r\nThe above command will install and inject an import of the git-story script to either `.bash_profile`, `.bashrc` or `.zshrc` (in that order).\r\n\r\nReload your shell to initialize git-story extensions.\r\n\r\n## Getting started\r\n\r\n\r\nBranch model:\r\n\r\n1. Start developing a feature, and name it `git feature <name>`\r\n2. Save local changes and sync with remote `git finish`\r\n3. Create a pull request\r\n\r\nThe principle is that you develop each new feature in its own branch and when\r\nyou're done you push it and create a pull request. See [GitHub flow](http://scottchacon.com/2011/08/31/github-flow.html) branch model.  \r\nNote that `git feature` and `git finish` are flexible. They both take an optional argument _target-branch_, which the current/new branch will sync with.\r\n\r\n## Example\r\n```bash\r\n$ git feature branch-name   # Sets up clean workspace based on remote master.\r\n$ git finish              # Commit changes, updates current and local branch.\r\n```\r\nOutput [example](http://showterm.io/f25fff6593f82dcdab7d1) (video).\r\n\r\n## Documentation\r\n\r\nPrint command usage:\r\n```bash\r\n$ git <git-story-extension> --usage\r\n```\r\n### Branching extensions\r\n\r\n* Start developing a feature\r\n  ```bash\r\n  $ git feature <branch-name> <target-branch>\r\n  ```\r\n  this will create a new branch _branch-name_ based of master or specified _target-branch_. If the branch exists on   remote pull the latest changes. Ensures the uniqueness of branch name at remote. Pushes the created branch to remote.  \r\n  Executes:\r\n  1. Checkout _target-branch_\r\n  2. Pull _target-branch_\r\n  3. Create new branch _branch-name_\r\n  4. Push _branch-name_\r\n\r\n* Commit and sync with repository\r\n  ```bash\r\n  $ git finish <target-branch>\r\n  ```\r\n  commit the changes you've made and merge changes with _target-branch_.\r\n  _target-branch_ is optional and the default is _target-branch_.  \r\n  Executes:\r\n  1. Prompt commit message if any uncommitted changes\r\n  2. Pull current branch\r\n  3. Pull _target-branch_\r\n  4. Push current branch\r\n  5. Perform local merge with _target-branch_ if configured\r\nwill exit and print conflicted files if any merge conflicts are found.\r\n\r\n* `git branch-status` shows current branch status.\r\n* `git pull-branch` pull current, or specified, branch's remote changes.\r\n* `git create-branch` create and checkout a new branch and push to remote.\r\n* `git push-branch` push the current branch to remote.\r\n* `git delete-branch` delete branch from remote and local.\r\n* `git delete-merged` delete all merged branches locally and at remote.\r\n\r\n\r\n### Convenience extensions\r\n* `git addcom` add all files and commit.\r\n* `git fuckit` commit all files and push current branch. Default is to prompt for commit message.\r\n* `git redo-commit` redo last commit.\r\n* `git goto <branch-name>` switches to branch _branch-name_ if the working directory is clean.\r\n* `git abort-merge` aborts current merge.\r\n* `git obliterate` remove file from local repository and its entire history.\r\n* `git zip-project` create zip-file of project.\r\n* `git ignore` add and list patterns to local and global gitignore.\r\n* `git conflicted` list files with merge-conflicts.\r\n* `git todos` list all TODOS and FIXMES.\r\n* `git tag-release` create a new tagged release.\r\n* `git rename-tag` rename an existing release.\r\n* `git changelog` generate changelog from last tag.\r\n\r\n### Log extensions\r\n* `git history` view repository commit history.\r\n* `git trail` shows the last common commit with current branch.\r\n* `git neck` show commits until first branching point.\r\n* `git divergence` show the difference between current branch and the same branch at remote.\r\n* `git local-commits` show local commits that haven't been pushed to remote.\r\n* `git commits-since` show commits since given time.\r\n\r\n### Project integration extensions\r\n* `git browse`  opens the repository on GitHub.\r\n* `git package` package project, runs `GS_PACKAGE`.\r\n* `git release` package project, runs `GS_RELEASE`.\r\n* `git install-project` install project, runs `GS_INSTALL`.\r\n* `git test`    package project, runs `GS_PRE_COMMIT_HOOK`.\r\n\r\n### Statistics extensions\r\n* Show statistics for repository\r\n\r\n        git stat <type>\r\n\r\n        types:\r\n          contrib <name> # shows statistics for all or specified author (alias: contributions)\r\n          commits        # shows number of commits for each author\r\n          weekdays       # prints statistics for number of commits per weekday\r\n          hour           # prints statistics for number of commits per hour\r\n          files          # prints number of files and lines\r\n          diff           # Print stat of uncommitted changes\r\n          log            # Print log with stat\r\n          modified       # Print stat of most modified files\r\n\r\n  prints statistics of given type.\r\n* `git churn` count number of changes for each file.\r\n* `git effort` like churn, but prettier and with active day count.\r\n* `git summary` show summary for current project.\r\n\r\n### git-story interactions\r\n* `git gs-update` gets the latest version of git-story.\r\n* `git gs-extend <extension-name>` add new git-story extension to git.\r\n* `git gs` list git-story extensions.\r\n\r\n### misc\r\n* `git repl` git read-eval-print-loop (REPL).\r\n\r\n\r\n## Configuration\r\nFor project specific configurations create a file named `.gitstoryrc` at the project's git root.\r\n\r\nSee full example with comments in [docs/gitstoryrc-example](https://github.com/buren/git-story/blob/master/docs/gitstoryrc-example).\r\n\r\nAvailable options and their default value:\r\n\r\n    GS_DEFAULT_REMOTE='origin'          # Default remote for git story\r\n    GS_GIT_STORY_BRANCH='master'        # Target branch for 'feature' & 'finish'\r\n    GS_LOCAL_MERGE=false                # Perform local merge on 'finish'\r\n    GS_PRINT_CHECKLIST=false            # Print checklist before 'finish'\r\n    GS_PROMPT_ON_DONE=false             # Prompt user before 'finish'\r\n    GS_TEST_ON_DONE=true                # Run test command before 'finish'\r\n    GS_CHECKLIST_MESSAGE='...'          # Checklist string for 'finish'\r\n    GS_PRE_COMMIT_HOOK=''               # A command that runs all tests\r\n    GS_PACKAGE=''                       # Shell command for 'package'\r\n    GS_RELEASE=''                       # Shell command for 'release\r\n    GS_INTSALL=''                       # Shell command for 'install'\r\n    GS_HAS_GITHUB=true                  # Project has GitHub.\r\n    GS_PROJECT_URL=''                   # Project URL\r\n    GS_TEST_ON_AUTO_MERGE=true          # Run tests command on auto merge\r\n    GS_PRODUCTION_BRANCH='heads/master' # Integration branch for production\r\n    GS_NEXT_VERSION_BRANCH=''           # Integration branch for next\r\n    GS_EDGE_BRANCH=''                   # Integration branch for edge\r\n    GS_GIT_STORY_EXT_BRANCH='master'    # Target branch for git-story extension\r\nDefault [config](https://github.com/buren/git-story/blob/master/config).\r\n\r\n## Notes\r\n* The software is supplied “as is” and all use is at your own risk (see [license](https://github.com/buren/git-story/blob/master/LICENSE))\r\n* `git branch-status` requires Ruby 1.8.7 or greater\r\n* Tested on Linux/OSX/Windows using both zsh, bash and cygwin*, doesn't work with sh.\r\n* Almost everything works with cygwin except:\r\n  * `git trail`\r\n  * `git neck` both neck and trail fails on `git -p column`\r\n* Fork the repository and update the URL defined in [setup/install](https://github.com/buren/git-story/blob/master/setup/install#L2) to install and use your own version of git-story\r\n* Thanks:\r\n  * [visionmedia/git-extras](https://github.com/visionmedia/git-extras)\r\n  * [cypher/dotfiles](https://github.com/cypher/dotfiles)\r\n* Uninstall git-story: `rm -rf ~/.git-story`\r\n\r\n\r\n## License\r\ngit-story is released under the [MIT License](https://github.com/buren/git-story/blob/master/LICENSE).\r\n","google":"UA-47025757-1","note":"Don't delete this file! It's used internally to help with page regeneration."}