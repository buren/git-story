{"name":"Git-story","tagline":"Simplified git workflow.","body":"# git-story (beta)\r\n\r\n\r\nSimplified git workflow.\r\nBranch strategy based on [GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html).\r\n\r\n* [Installation](#install-git-story)\r\n* [Example](#example)\r\n* [Command list](#command-list)\r\n* [Documentation](#documentation)\r\n* [Notes](#notes)\r\n* [License](#license)\r\n\r\n## Install git-story\r\n\r\n    curl https://raw2.github.com/buren/git-story/master/setup/install.sh | bash\r\ninjects import of git-story script to either `.bash_profile`, `.bashrc` or `.zshrc` (in that order).\r\n\r\n## Getting started\r\ngit-story is a git branching model which tries to so simple that any VCS novice should be able to effectively use it within 5 minutes.\r\n\r\nThe model:\r\n\r\n1. Start developing a feature, and name it `gs dev <name>`\r\n2. Save local changes and sync with remote `gs done <commit_message>`\r\n3. If any conflicts fix them and `gs done \"Fixed merge conflicts in ...\"`\r\n4. Make a pull request on GitHub `gs pull-request`\r\n\r\n## Example\r\n\r\n    gs dev branch_name                     # Sets up clean workspace based of remote master.\r\n    gs commit \"Commit message\"             # Commit changes locally.\r\n    gs done \"Commit message\"               # Commit changes, update master and merge with repository.\r\n\r\n## Command list\r\n\r\n    gs <command>\r\n       dev               # Start developling a new feature (alias: feature)\r\n       pull              # Download changes from remote branch to local workspace\r\n       commit            # Commit changes and push branch to remote (alias: checkpoint)\r\n       done              # Commit changes and sync with remote (alias: release)\r\n       test              # Runs test command defined in .gitstoryrc (alias: pre-commit)\r\n       switchto          # Switch from current branch to specified branch (alias: branch, goto)\r\n       diff              # List status and uncomitted changes\r\n       pull-request      # Open current git repository on Github (alias: open, github)\r\n       history           # List repository commits (alias: repo-history)\r\n       show              # Show last or specified commit (alias: last)\r\n       status            # Shows the current git status\r\n       where             # Shows all available branches (alias: branches)\r\n       list              # Print command list\r\n       stat              # Print statistics of git repository (alias: statistics)\r\n       get-update        # Update git-story\r\n\r\n## Documentation\r\n\r\n* Start developing a feature\r\n\r\n        gs dev <branch_name>\r\n        gs dev <branch_name> <base_branch>\r\nthis will create a new branch <branch_name> based of master or specified <base_branch>. If the branch exists on remote pull the latest changes. Ensures the uniqueness of branch name at remote. Pushes the newly created branch to remote.\r\nAlias: feature\r\n* Commit your changes\r\n\r\n        gs commit <commit_message>\r\ncomment and commit to the changes you've made.\r\nAlias: checkpoint\r\n* Commit and sync with repository\r\n\r\n        gs done <commit_message> <target_branch>\r\ncomment and commit the changes you've made and merge changes made on <target_branch>.\r\n`<target_branch>` is optional and defaults to 'master'.\r\nIf no merge conflicts; make a pull request `gs pull-request`. Otherwise fix all merge conflicts and run `gs done \"Fixed merge conflicts for ...\"` and then `gs pull-request`.\r\nAlias: release\r\n* Fetch and merge\r\n\r\n        gs pull\r\nfetch and merge from remote.\r\nExample: If the current branch is \"test_feature\" the command will try to fetch and merge the remote version of test_feature.\r\n* ```gs pull-request``` opens the repository on GitHub. Alias: `open`, `github`\r\n* ```gs where``` prints all branches and marks the current one with a *. Alias: `branches`\r\n* ```gs switchto <branch_name>``` switches to branch <branch_name> if all changes are stashed or committed. Alias: `branch`, `goto`\r\n* ```gs diff``` view all uncommitted changes\r\n* ```gs history``` view repository commit history. Alias: `repo-history`\r\n* ```gs list``` list all available git-story commands\r\n* ```gs get_update``` gets the latest version of git-story. Alias: `get-update`, `getupdate`\r\n* Show commited changes\r\n\r\n        gs show\r\n        gs show <sha>\r\nview the last commit in current branch or specified commit <sha>.\r\nAlias: `last`\r\n* Show statistics for repository\r\n\r\n        gs stat <type>\r\n                contributions <author> # shows statistics for all authors or specified author (alias: contrib)\r\n                commits                # shows number of commits for each author\r\n                weekdays               # prints statistics for number of commits per weekday\r\n                hour                   # prints statistics for number of commits per hour\r\n\r\n  show statistics for repository.  \r\n  Alias: statistics  \r\n## Notes\r\nOverides ```gs``` (Ghostscript) on Linux.\r\n\r\n## License\r\nReleased under the [MIT License](https://github.com/buren/git-story/blob/master/LICENSE).\r\n","google":"UA-47025757-1","note":"Don't delete this file! It's used internally to help with page regeneration."}